#include <vector>
#include <cmath>
#include <iostream>
#include <string>
#include <queue>
#include "../MCTS/base.h"
#include "./loq2/src/loq2/native/type.h"
#include "./loq2/src/loq2/native/state/state.h"
#include <tuple> // 
#include <random>
using namespace std;

class LoqAction : public MCTS::Action{
    public:
        int action;
        int x;
        int y;
        int w;

        LoqAction(int action, int x, int y, int w){
            this->action = action;
            this->x = x;
            this->y = y;
            this->w = w;
        }

        virtual ~LoqAction() = default;

        virtual Action* copy(){
            return new LoqAction(*this);
        }

        virtual void* get_info(int index){ // State can only get info using this method
            if(index==1)
                return &this->action;
            else if (index==2)
                return &this->x;
            else if (index==3)
                return &this->y;
            else if (index==4)
                return &this->w;

            return NULL;
        }

        virtual string to_string(){
            string s = "";
            switch(this->action){
                case 1:
                    s += "Move Agent";
                    break;
                case 2:
                    s += "Place I block";
                    break;
                case 3:
                    s += "Place L block";
                    break;
            }
            s += "\t x : " + std::to_string(this->x);
            s += "\t y : " + std::to_string(this->y);
            s += "\t w : " + std::to_string(this->w);

            return s;
        }
};

class LoqState : public MCTS::State{
    protected:
        ::State orgstate;
    
    public: 
        LoqState(){ // this gives initial state
            orgstate = INIT_STATE;
            this->turn = orgstate.getTurn();
        }

        LoqState(::State state, bool turn){
            orgstate = state;
            this->turn = turn;
        }

        /*
        LoqState(const LoqState& copy){ // overriding copy constructor to deepcopy
            //std::copy(&copy.board[0][0], &copy.board[0][0]+BOARD_SIZE*BOARD_SIZE, &this->board[0][0]);
            //this->turn = copy.turn;
            //this->done = copy.done;
        }
        */

        virtual ~LoqState() = default;

        virtual State* copy(){
            return new LoqState(*this);
        }

        ::State get_internal_state(){
            return orgstate;
        }

        virtual vector<MCTS::Action*> get_all_actions(){
            vector<MCTS::Action*> actions;
            ::State curstate = this->orgstate;
            int dx[] = {1,-1,0,0,-1,-1,1,1,2,-2,0,0};
            int dy[] = {0,0,1,-1,1,-1,1,-1,0,0,-2,2};
            int mx = curstate.position().x();
            int my = curstate.position().y();

            int my_dis = bfs(curstate.position(), curstate.getTurn());
            int oppo_dis = bfs(curstate.position(my=false), !curstate.getTurn());
            int standard = my_dis + oppo_dis;

            if(this->done){ // no more action if state is done
                return actions;
            }

            
            // MOVE - 맵 밖을 벗어나는 것도 허용임
            int pos[] = {curstate.position().x(), curstate.position().y()};
            for (int d = 0; d < 12; d++){
                if (curstate.act(1,pos[0]+dx[d],pos[1]+dy[d],1).position().x() != 0){
                    LoqAction* action = new LoqAction(1,pos[0]+dx[d],pos[1]+dy[d],1);
                    actions.push_back(action);
                }
            }

            for(int x = 1; x <= BOARD_SIZE; x++){
                for(int y = 1; y <= BOARD_SIZE; y++){
                    for(int w = 1; w <= 2; w++){
                        ::State next_state = curstate.act(2,x,y,w);
                        LoqState* next_mcts_state = new LoqState(next_state, next_state.getTurn());
                        if (next_state.position().x() != 0){
                            LoqAction* action = new LoqAction(2,x,y,w);
                            if (!((4 <= mx &&  mx <= 6) && (4 <= my && my <= 6))){ // player가 부쉬 안에 있지 않을 때
                                if(w == 1){
                                    if ((5 <= x && x <= 6) && (3 <= y && y <=6)){
                                        delete action;delete next_mcts_state;
                                        break;
                                    }
                                }
                                else{
                                    if ((3 <= x && x<= 6) && (5 <= y && y <=6)){
                                        delete action;delete next_mcts_state;
                                        break;
                                    }
                                }
                            }
                            // huristic policy apply
                            int standard_test = 
                            next_mcts_state->bfs(next_state.position(), next_state.getTurn()) +
                            next_mcts_state->bfs(next_state.position(my = false), !next_state.getTurn());
                            if(standard == standard_test){
                                delete action;
                            }
                            else{
                                actions.push_back(action);
                            }
                        }
                        delete next_mcts_state;
                    }
                    for(int w = 1; w <= 4; w++){
                        ::State next_state = curstate.act(3,x,y,w);
                        LoqState* next_mcts_state = new LoqState(next_state, next_state.getTurn());
                        if (next_state.position().x() != 0){
                            LoqAction* action = new LoqAction(3,x,y,w);
                            if (!((4 <= mx &&  mx <= 6) && (4 <= my && my <= 6))){
                                if (w==1){
                                    if (!(x == 4 && y==4) && (4<= x && x<=6) && (4 <= y && y <= 6)){
                                        delete action;delete next_mcts_state;
                                        break;
                                    }
                                }
                                else if (w==2){
                                    if (!(x == 4 && y==6) &&(4 <= x && x <= 6) && (4 <= y && y <= 6)){
                                        delete action;delete next_mcts_state;
                                        break;
                                    }
                                }
                                else if (w==3){
                                    if (!(x == 6 && y==6) && (4<= x && x<=6) && (4 <= y && y <= 6)){
                                        delete action;delete next_mcts_state;
                                        break;
                                    }
                                }
                                else {
                                    if (!(x == 6 && y==4) && (4<= x && x<=6) && (4 <= y && y <= 6)){
                                        delete action;delete next_mcts_state;
                                        break;
                                    }
                                }
                            }
                            // huristic policy apply
                            int standard_test = 
                            next_mcts_state->bfs(next_state.position(), next_state.getTurn()) +
                            next_mcts_state->bfs(next_state.position(my = false), !next_state.getTurn());
                            if(standard == standard_test){
                                delete action;
                            }
                            else{
                                actions.push_back(action);
                            }
                        }
                        delete next_mcts_state;
                    }
                }
            }

            return actions;
        }


        virtual vector<MCTS::Action*> get_all_actions_simulation(){
            static thread_local std::mt19937 generator;
            vector<MCTS::Action*>   actions;
            ::State     curstate = this->orgstate;
            int dx[] = {1,-1,0,0,-1,-1,1,1,2,-2,0,0};
            int dy[] = {0,0,1,-1,1,-1,1,-1,0,0,-2,2};
            int mx = curstate.position().x();
            int my = curstate.position().y();

            if(this->done){ // no more action if state is done
                return actions;
            }
            
            int compen = 0;
            float blockratio = 0.0f; //전체 행동중 블럭을 놓는 비율
            float betweenwallratio = 1.0f; //블럭을 놓는 행동 중, 벽 근처에 놓는 비율. 다른 부분이 구현되면 수치 조정.
            float bestmoveratio = 0.9f; // 움직이는 행동 중, 최단거리로 움직이는 비율
            int totalMovecnt = 500;
            
            std::uniform_int_distribution<int> distribution(0, 100);
            if(distribution(generator) < 100 * blockratio) {
                if(distribution(generator) < 100 * betweenwallratio) {
                    //cout << "yeah\n";
                    int ivhdx[6] = {-1, -1, -1, 0, 0, 0}; 
                    int ivhdy[6] = {2, 1, 0, 2, 1, 0};
                    int ivvdx[2] = {0, 0}; 
                    int ivvdy[2] = {-1,2};
                    int ihhdx[2] = {-1,2}; 
                    int ihhdy[2] = {0, 0};
                    int ihvdx[6] = {0, 1, 2, 0, 1, 2}; 
                    int ihvdy[6] = {-1, -1, -1, 0, 0, 0};


                    // Left most point -> counter clockwise
                    int l1hdx[4] = {-1, -1, 0, 1};
                    int l1hdy[4] = {0, 1, 1, 0};
                    int l1vdx[4] = {0, 0, 1, 1};
                    int l1vdy[4] = {-1, 1, 0, -1};

                    int l2hdx[4] = {-1, 0, -1, 1};
                    int l2hdy[4] = {0, 0, 1, 1};
                    int l2vdx[4] = {0, 0, 1, 1};
                    int l2vdy[4] = {-1, 1, 1, 0};

                    int l3hdx[4] = {-1, 1, 0, 1};
                    int l3hdy[4] = {1, 1, 0, 0};
                    int l3vdx[4] = {0, 0, 1, 1};
                    int l3vdy[4] = {0, 1, 1, -1};

                    int l4hdx[4] = {-1, -1, 0, 1};
                    int l4hdy[4] = {0, 1, 1, 0};
                    int l4vdx[4] = {0, 0, 1, 1};
                    int l4vdy[4] = {-1, 1, 0, -1};

                    vector<tuple<pair<int, int>, int, vector<MCTS::Action*>>> all_actions_t;
        
                    for(int x = 1; x <= BOARD_SIZE; x++){ // 9
                        for(int y = 1; y <= BOARD_SIZE; y++){ // 9
                            for(int w = 1; w <= 2; w++){
                                if ((int)(curstate.act(2,x,y,w).position().x()) != 0){
                                    LoqAction* action = new LoqAction(2,x,y,w);
                                        compen = 1;
                                        if(w == 1){
                                            for(int k = 0;k < 6; ++k) {
                                                if(x + ivhdx[k] < BOARD_SIZE && y + ivhdy[k] < BOARD_SIZE &&x + ivhdx[k] >= 1 && y + ivhdy[k] >= 1  && orgstate.getMap().v_block(Point(x + ivhdx[k],y + ivhdy[k])))
                                                    compen+=1;
                                            }
                                            for(int k = 0;k < 2; ++k) {
                                                if(x + ivvdx[k] < BOARD_SIZE && y + ivvdy[k] < BOARD_SIZE &&x + ivvdx[k] >= 1 && y + ivvdy[k] >= 1 &&orgstate.getMap().h_block(Point(x + ivvdx[k],y + ivvdy[k])))
                                                    compen++;
                                            }              

                                        }
                                        else{
                                            for(int k = 0;k < 2; ++k) {
                                                if(x + ihhdx[k] >= 1 && y + ihhdy[k] >= 1 &&orgstate.getMap().v_block(Point(x + ihhdx[k],y + ihhdy[k])))
                                                    compen++;
                                            }
                                            for(int k = 0;k < 6; ++k) {
                                                if(x + ihvdx[k] >= 1 && y + ihvdy[k] >= 1 &&orgstate.getMap().h_block(Point(x + ihvdx[k],y + ihvdy[k])))
                                                    compen++;
                                            }

                                        }
                                        for(int k = 0; k < sqrt(compen); ++k)
                                            actions.push_back(action->copy());
                                        //pair<int, int> q = make_pair(2, w);
                                        //tuple<pair<int, int>, int, vector<MCTS::Action*>> p = make_tuple(q, compen, actions);
                                        //all_actions_t.push_back(p);
                                    
                                    delete action;
                                }
                            }
                            for(int w = 1; w <= 4; w++){
                                if ((int)(curstate.act(3,x,y,w).position().x()) != 0){
                                    LoqAction* action = new LoqAction(3,x,y,w);
                                        compen=1;
                                        if (w==1){
                                            for(int k = 0;k < 4; ++k) {
                                                // hblock
                                                if(x + l1hdx[k] < BOARD_SIZE && y + l1hdy[k] < BOARD_SIZE &&x + l1hdx[k] >= 1 && y + l1hdy[k] >= 1  && orgstate.getMap().v_block(Point(x + l1hdx[k],y + l1hdy[k])))
                                                    compen+=1;
                                            }
                                            for(int k = 0;k < 4; ++k) {
                                                if(x + l1vdx[k] < BOARD_SIZE && y + l1vdy[k] < BOARD_SIZE &&x + l1vdx[k] >= 1 && y + l1vdy[k] >= 1 &&orgstate.getMap().h_block(Point(x + l1vdx[k],y + l1vdy[k])))
                                                    compen++;
                                            }

                                        }
                                        else if (w==2){
                                            for(int k = 0;k < 4; ++k) {
                                                // hblock
                                                if(x + l2hdx[k] < BOARD_SIZE && y + l2hdy[k] < BOARD_SIZE &&x + l2hdx[k] >= 1 && y + l2hdy[k] >= 1  && orgstate.getMap().v_block(Point(x + l2hdx[k],y + l2hdy[k])))
                                                    compen+=1;
                                            }
                                            for(int k = 0;k < 4; ++k) {
                                                if(x + l2vdx[k] < BOARD_SIZE && y + l2vdy[k] < BOARD_SIZE &&x + l2vdx[k] >= 1 && y + l2vdy[k] >= 1 &&orgstate.getMap().h_block(Point(x + l2vdx[k],y + l2vdy[k])))
                                                    compen++;
                                            }                                 

                                        }
                                        else if (w==3){
                                            for(int k = 0;k < 4; ++k) {
                                                // hblock
                                                if(x + l3hdx[k] < BOARD_SIZE && y + l3hdy[k] < BOARD_SIZE &&x + l3hdx[k] >= 1 && y + l3hdy[k] >= 1  && orgstate.getMap().v_block(Point(x + l3hdx[k],y + l3hdy[k])))
                                                    compen+=1;
                                            }
                                            for(int k = 0;k < 4; ++k) {
                                                if(x + l3vdx[k] < BOARD_SIZE && y + l3vdy[k] < BOARD_SIZE &&x + l3vdx[k] >= 1 && y + l3vdy[k] >= 1 &&orgstate.getMap().h_block(Point(x + l3vdx[k],y + l3vdy[k])))
                                                    compen++;
                                            }            
                                        }
                                        else {
                                            for(int k = 0;k < 4; ++k) {
                                                // hblock
                                                if(x + l4hdx[k] < BOARD_SIZE && y + l4hdy[k] < BOARD_SIZE &&x + l4hdx[k] >= 1 && y + l4hdy[k] >= 1  && orgstate.getMap().v_block(Point(x + l4hdx[k],y + l4hdy[k])))
                                                    compen+=1;
                                            }
                                            for(int k = 0;k < 4; ++k) {
                                                if(x + l4vdx[k] < BOARD_SIZE && y + l4vdy[k] < BOARD_SIZE &&x + l4vdx[k] >= 1 && y + l4vdy[k] >= 1 &&orgstate.getMap().h_block(Point(x + l4vdx[k],y + l4vdy[k])))
                                                    compen++;
                                            }            
                                        }
                                    
                                    for(int k = 0; k < sqrt(compen); ++k)
                                        actions.push_back(action->copy());
                                    
                                    //pair<int, int> q = make_pair(3, w);
                                    //tuple<pair<int, int>, int, vector<MCTS::Action*>> p = make_tuple(q, compen, actions);
                                    //all_actions_t.push_back(p);
                                    delete action;
                                }
                            }
                            
                        }
                    }
                }
                /*else {
                    return get_blocking_action();
                }*/
            }
            else{
                //cout << "no!!!\n";
                // MOVE - 맵 밖을 벗어나는 것도 허용임
                // action 500 -> 300 개를 move // 2 : 50,  4 : 25
                int pos[] = {curstate.position().x(), curstate.position().y()};
                vector<LoqAction*> availMove;
                for (int d = 0; d < 12; d++){
                    if ((int)(curstate.act(1,pos[0]+dx[d],pos[1]+dy[d],1).position().x()) != 0){
                            LoqAction* action = new LoqAction(1,pos[0]+dx[d],pos[1]+dy[d],1);
                            availMove.push_back(action);
                        
                    }
                }
                for(int i = 0; i < availMove.size(); ++i) {
                    for(int j = 0 ; j < totalMovecnt*(1-bestmoveratio) / availMove.size(); ++j)
                        actions.push_back(availMove[i]->copy());
                    delete availMove[i];

                }
                LoqAction* action = (LoqAction*)get_best_move_action();
                for(int t = 0 ; t < totalMovecnt * bestmoveratio ; t++){ // 140
                    actions.push_back(action->copy());
                }
                delete action;
            }
            return actions;
        }



        bool is_block_all_used(bool turn){
            IBlock* iblock;
            LBlock* lblock;
            if (!turn){
                iblock = orgstate.getKIBlock();
                lblock = orgstate.getKLBlock();
            }
            else{
                iblock = orgstate.getPIBlock();
                lblock = orgstate.getPLBlock();
            }
            for (int i=0; i<I_COUNT; ++i){
                if(!iblock[i]) return false;
            }
            for (int i=0; i<L_COUNT; ++i){
                if(!lblock[i]) return false;
            }
            return true;
        }

        int bfs(Point start, bool turn){
            queue<pair<Point, int>> q;
            vector<vector<bool>> visited(10, vector<bool>(10, false));
            q.push({start, 0});
            visited[start.x()][start.y()] = true;
            int nx, ny, cx, cy;
            int dx[] = {-1, 0, 1, 0};
            int dy[] = {0, -1, 0, 1};
            int goal_y = turn? 1 : 9; // 포스텍 turn이 true임

            while (!q.empty()){
                Point current = q.front().first;
                int steps = q.front().second;
                q.pop();
                cx = current.x();
                cy = current.y();
                //cout << cx << " " << cy << " " << steps << endl;
                if (cy == goal_y) return steps;
                for (int i = 0; i < 4; ++i){
                    nx = cx + dx[i];
                    ny = cy + dy[i];
                    // 상대방이 없다고 가정
                    if (orgstate.movable(Point(nx, ny), current, Point(-1, -1)) && !visited[nx][ny]){
                        q.push({Point(nx, ny), steps + 1});
                        visited[nx][ny] = true;
                    }
                }
            }
            return -1; // No path found
        }
vector<MCTS::Action*> get_blocking_action() {
    Point op = orgstate.position(0);
    int x = (int)op.x();
    int y = (int)op.y();
    Point p = orgstate.position(1);
    int mx=(int)p.x();
    int my = (int)p.y();
    bool turn = orgstate.getTurn();
    ::State     curstate = this->orgstate;
    vector<MCTS::Action*> result;
    for(int w = 1; w <=4; ++w){
        if((int)(orgstate.act(3,x,y,w).position().x()) != 0)
            result.push_back(new LoqAction(3, x,y, w));
    }
    int vdx[] = {0, 0, 1, 1};
    int vdy[] = {0, -1, 0, -1};
    int hdx[] = {0,-1, 0, -1};
    int hdy[] = {0,0, 1, 1};
    for(int i = 0; i < 4; ++i) {
        int nx = x + vdx[i];
        int ny = y + vdy[i];
        if((int)(orgstate.act(2,nx,ny,1).position().x()) !=0)
            result.push_back(new LoqAction(2,nx,ny,1));
    }
    for(int i = 0; i < 4; ++i) {
        int nx = x + hdx[i];
        int ny = y + hdy[i];
        if((int)(orgstate.act(2,nx,ny,2).position().x()) !=0)
            result.push_back(new LoqAction(2,nx,ny,2));
    }
    return result;
}
MCTS::Action* get_best_move_action(){
            static thread_local std::mt19937 generator;
        int nx, ny;
        int min_dis = 1e9;
        Point pos = orgstate.position();
        MCTS::Action* action = nullptr;
        vector<pair<int,int>> dis_arr;
        vector<MCTS::Action*> actions;
        int cx = pos.x();
        int cy = pos.y();
        int dx[] = {1,-1,0,0,-1,-1,1,1,2,-2,0,0};
        int dy[] = {0,0,1,-1,1,-1,1,-1,0,0,-2,2};

        for (int i = 0; i < 12; ++i){
            nx = cx + dx[i];
            ny = cy + dy[i];

            Point npos(nx, ny);
            if (orgstate.movable(npos, pos, orgstate.position(false))){
                int dis = bfs(npos, orgstate.getTurn());
                if (dis != -1 && dis <= min_dis){
                    min_dis = dis;
                    dis_arr.emplace_back(std::make_pair(i, min_dis));
                    //cout << dis << endl;
                }
            }
        }
        //cout << "min_dis: "<< min_dis << endl;

        for (auto it: dis_arr){
            if (it.second == min_dis) {
                nx = cx + dx[it.first];
                ny = cy + dy[it.first];
                if (!orgstate.getTurn()){
                    if (dy[it.first] > 0) {
                        actions.emplace_back(action);
                        actions.emplace_back(action);
                        actions.emplace_back(action);
                        actions.emplace_back(action);
                    }
                }
                else{
                    if (dy[it.first] < 0) {
                        actions.emplace_back(action);
                        actions.emplace_back(action);
                        actions.emplace_back(action);
                        actions.emplace_back(action);
                    }
                }
                // cout << it.first << endl;
                //if (action != nullptr) delete action;
                action = new LoqAction(1, nx, ny, 1);
                actions.emplace_back(action);
            }
        }
        std::uniform_int_distribution<int> distribution(0, actions.size() -1);
        action = actions[distribution(generator)];
        //cout << "size: " << actions.size() << endl;
        //actions.clear();
        return action;
    }

    vector<MCTS::Action*> get_all_best_move_actions(){
        int nx, ny;
        int min_dis = 1e9;
        Point pos = orgstate.position();
        MCTS::Action* action = nullptr;
        vector<pair<int,int>> dis_arr;
        vector<MCTS::Action*> actions;
        int cx = pos.x();
        int cy = pos.y();
        int dx[] = {1,-1,0,0,-1,-1,1,1,2,-2,0,0};
        int dy[] = {0,0,1,-1,1,-1,1,-1,0,0,-2,2};

        for (int i = 0; i < 12; ++i){
            nx = cx + dx[i];
            ny = cy + dy[i];

            Point npos(nx, ny);
            if (orgstate.movable(npos, pos, orgstate.position(false))){
                int dis = bfs(npos, orgstate.getTurn());
                if (dis != -1 && dis <= min_dis){
                    min_dis = dis;
                    dis_arr.emplace_back(std::make_pair(i, min_dis));
                    //cout << dis << endl;
                }
            }
        }
        //cout << "min_dis: "<< min_dis << endl;

        for (auto it: dis_arr){
            if (it.second == min_dis) {
                nx = cx + dx[it.first];
                ny = cy + dy[it.first];
                cout << it.first << endl;
                //if (action != nullptr) delete action;
                action = new LoqAction(1, nx, ny, 1);
                actions.emplace_back(action);
            }
        }
        return actions;
    }
        // virtual MCTS::Action* policy(){
        //     if(is_block_all_used(true)&&is_block_all_used(false)){
        //         return get_best_move_action();
        //     }
        //     else{
        //         return NULL;
        //     }
        // }
        // revised part //
        static bool compare(const pair<MCTS::Action*, int> a, const pair<MCTS::Action*, int> b){
            return a.second < b.second;
        }

        virtual MCTS::Action* policy(){
            bool myturn = get_turn();
            int my_dis = bfs(orgstate.position(), myturn);
            int op_dis = bfs(orgstate.position(false), !myturn);

            if (is_block_all_used(!myturn)){
                if(my_dis <= op_dis || is_block_all_used(myturn))              
                    return get_best_move_action();
                else{
                    vector<MCTS::Action*>candidates;
                    for(int i = 1; i <=9; ++i) {
                        for(int j = 1; j <=9; ++j){
                            for(int w = 1; w<=2;++w)
                                if((int)orgstate.act(2,i,j,w).position().x() != 0)
                                    candidates.push_back(new LoqAction(2,i,j,w));
                            for(int w = 1; w<=4;++w)
                                if((int)orgstate.act(3,i,j,w).position().x() != 0)
                                    candidates.push_back(new LoqAction(3,i,j,w));
                        }
                    }
                    vector<pair<MCTS::Action*, int>> actions;
                    for (auto action : candidates){
                        LoqState* st_ptr = (LoqState*) step(action, get_turn());
                        LoqState new_state = *st_ptr;
                        int n_op_dis = new_state.bfs(new_state.get_internal_state().position(false), !myturn);
                        int n_my_dis = new_state.bfs(new_state.get_internal_state().position(true), myturn);
                        int val = (n_my_dis - my_dis) - (n_op_dis - op_dis); // val 작을수록 좋음
                        if ((int)st_ptr->get_internal_state().position().x() != 0)
                            actions.emplace_back(make_pair(action, val));
                    }

                    sort(actions.begin(), actions.end(), compare);
                    if (actions.empty()) return nullptr;
                    return actions[0].first->copy();
                }
            }
            else{
                return nullptr;
            }
        }
        // revised part //
        
        virtual MCTS::State* step(MCTS::Action* action, bool turn){ //manipulate done, draw, turn (deepcopy needed)  
            // Since act is safe for change, no deepcopy
            ::State changed = this->orgstate.act(*(int*)action->get_info(1),*(int*)action->get_info(2),*(int*)action->get_info(3),*(int*)action->get_info(4));
            LoqState* next_state = new LoqState(changed, turn); // 이거 turn 시스템 수정해야됨 

            if (changed.win() != 0){
                next_state->done = true;
            }
            
            bool no_action = true;

            next_state->turn = !this->turn;

            return next_state;
        }

        virtual string to_string(){
            // for test
            //Todo : display the line index.
            string s = "";
            bool t = orgstate.getTurn();
            int kx = orgstate.position(!t).x();
            int ky = orgstate.position(!t).y();
            int px = orgstate.position(t).x();
            int py = orgstate.position(t).y();

            for(int j=0 ; j < 2*BOARD_SIZE-1 ; j++){
                for(int i=0 ; i < 2*BOARD_SIZE-1 ; i++){
                    if(j%2==0){
                        if(i % 2 == 0){
                            if((kx-1)*2 == i && (9-ky)*2 == j) // blue
                                s+="\033[34m O \033[0m";
                            else if((px-1)*2 == i && (9-py)*2 == j) // red
                                s+="\033[31m O \033[0m";
                            else
                                s+="   ";
                        }
                        else{
                            if(orgstate.h_block(Point(i/2+2, 9-j/2)))
                                s+="\033[92m┃\033[0m";
                            else
                                s+="│";
                        }
                    }
                    else{
                        if(i % 2 == 0){
                            if(orgstate.v_block(Point(i/2+1, 9-j/2)))
                                s+="\033[92m━━━\033[0m";
                            else
                                s+="───";
                        }
                        else
                            s+="┼";
                    }
                }
                s+="\n";
            }
            return s;
        }
};


MCTS::MoveInfo get_MoveInfo(LoqState state, int epochs, int rollout_num, int thread_num){
    MCTS::SearchTree tree(&state, thread_num);
    for(int i=0 ; i<epochs ; i++){
        tree.selection();
        tree.expansion();
        float win_num = tree.rollout(rollout_num);
        tree.backpropagation(win_num, rollout_num);

        if((i+1)%1000==0){
            cout << "Training : " << (i+1) << " epochs completed." << endl;
        }
    }
    MCTS::MoveInfo info = tree.get_next_move();
    
    tree.clear();
    return info;
}	